// Code generated by counterfeiter. DO NOT EDIT.
package crawlfakes

import (
	"sync"

	"github.com/jjmschofield/GoCrawl/internal/app/counters"
	"github.com/jjmschofield/GoCrawl/internal/app/crawl"
)

type FakeQueueWorker struct {
	StartStub        func(crawl.WorkerChannels, *counters.AtomicInt64, *counters.AtomicInt64, *sync.WaitGroup)
	startMutex       sync.RWMutex
	startArgsForCall []struct {
		arg1 crawl.WorkerChannels
		arg2 *counters.AtomicInt64
		arg3 *counters.AtomicInt64
		arg4 *sync.WaitGroup
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeQueueWorker) Start(arg1 crawl.WorkerChannels, arg2 *counters.AtomicInt64, arg3 *counters.AtomicInt64, arg4 *sync.WaitGroup) {
	fake.startMutex.Lock()
	fake.startArgsForCall = append(fake.startArgsForCall, struct {
		arg1 crawl.WorkerChannels
		arg2 *counters.AtomicInt64
		arg3 *counters.AtomicInt64
		arg4 *sync.WaitGroup
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("Start", []interface{}{arg1, arg2, arg3, arg4})
	fake.startMutex.Unlock()
	if fake.StartStub != nil {
		fake.StartStub(arg1, arg2, arg3, arg4)
	}
}

func (fake *FakeQueueWorker) StartCallCount() int {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	return len(fake.startArgsForCall)
}

func (fake *FakeQueueWorker) StartCalls(stub func(crawl.WorkerChannels, *counters.AtomicInt64, *counters.AtomicInt64, *sync.WaitGroup)) {
	fake.startMutex.Lock()
	defer fake.startMutex.Unlock()
	fake.StartStub = stub
}

func (fake *FakeQueueWorker) StartArgsForCall(i int) (crawl.WorkerChannels, *counters.AtomicInt64, *counters.AtomicInt64, *sync.WaitGroup) {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	argsForCall := fake.startArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeQueueWorker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeQueueWorker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ crawl.QueueWorker = new(FakeQueueWorker)
