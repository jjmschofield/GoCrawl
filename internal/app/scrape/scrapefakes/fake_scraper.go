// Code generated by counterfeiter. DO NOT EDIT.
package scrapefakes

import (
	"net/url"
	"sync"

	"github.com/jjmschofield/GoCrawl/internal/app/scrape"
)

type FakeScraper struct {
	ScrapeStub        func(url.URL) (scrape.Result, error)
	scrapeMutex       sync.RWMutex
	scrapeArgsForCall []struct {
		arg1 url.URL
	}
	scrapeReturns struct {
		result1 scrape.Result
		result2 error
	}
	scrapeReturnsOnCall map[int]struct {
		result1 scrape.Result
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeScraper) Scrape(arg1 url.URL) (scrape.Result, error) {
	fake.scrapeMutex.Lock()
	ret, specificReturn := fake.scrapeReturnsOnCall[len(fake.scrapeArgsForCall)]
	fake.scrapeArgsForCall = append(fake.scrapeArgsForCall, struct {
		arg1 url.URL
	}{arg1})
	fake.recordInvocation("Scrape", []interface{}{arg1})
	fake.scrapeMutex.Unlock()
	if fake.ScrapeStub != nil {
		return fake.ScrapeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.scrapeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeScraper) ScrapeCallCount() int {
	fake.scrapeMutex.RLock()
	defer fake.scrapeMutex.RUnlock()
	return len(fake.scrapeArgsForCall)
}

func (fake *FakeScraper) ScrapeCalls(stub func(url.URL) (scrape.Result, error)) {
	fake.scrapeMutex.Lock()
	defer fake.scrapeMutex.Unlock()
	fake.ScrapeStub = stub
}

func (fake *FakeScraper) ScrapeArgsForCall(i int) url.URL {
	fake.scrapeMutex.RLock()
	defer fake.scrapeMutex.RUnlock()
	argsForCall := fake.scrapeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeScraper) ScrapeReturns(result1 scrape.Result, result2 error) {
	fake.scrapeMutex.Lock()
	defer fake.scrapeMutex.Unlock()
	fake.ScrapeStub = nil
	fake.scrapeReturns = struct {
		result1 scrape.Result
		result2 error
	}{result1, result2}
}

func (fake *FakeScraper) ScrapeReturnsOnCall(i int, result1 scrape.Result, result2 error) {
	fake.scrapeMutex.Lock()
	defer fake.scrapeMutex.Unlock()
	fake.ScrapeStub = nil
	if fake.scrapeReturnsOnCall == nil {
		fake.scrapeReturnsOnCall = make(map[int]struct {
			result1 scrape.Result
			result2 error
		})
	}
	fake.scrapeReturnsOnCall[i] = struct {
		result1 scrape.Result
		result2 error
	}{result1, result2}
}

func (fake *FakeScraper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.scrapeMutex.RLock()
	defer fake.scrapeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeScraper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ scrape.Scraper = new(FakeScraper)
