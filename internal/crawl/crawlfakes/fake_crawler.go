// Code generated by counterfeiter. DO NOT EDIT.
package crawlfakes

import (
	"net/url"
	"sync"

	"github.com/jjmschofield/gocrawl/internal/crawl"
)

type FakeCrawler struct {
	CrawlStub        func(url.URL) crawl.Counters
	crawlMutex       sync.RWMutex
	crawlArgsForCall []struct {
		arg1 url.URL
	}
	crawlReturns struct {
		result1 crawl.Counters
	}
	crawlReturnsOnCall map[int]struct {
		result1 crawl.Counters
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCrawler) Crawl(arg1 url.URL) crawl.Counters {
	fake.crawlMutex.Lock()
	ret, specificReturn := fake.crawlReturnsOnCall[len(fake.crawlArgsForCall)]
	fake.crawlArgsForCall = append(fake.crawlArgsForCall, struct {
		arg1 url.URL
	}{arg1})
	fake.recordInvocation("Crawl", []interface{}{arg1})
	fake.crawlMutex.Unlock()
	if fake.CrawlStub != nil {
		return fake.CrawlStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.crawlReturns
	return fakeReturns.result1
}

func (fake *FakeCrawler) CrawlCallCount() int {
	fake.crawlMutex.RLock()
	defer fake.crawlMutex.RUnlock()
	return len(fake.crawlArgsForCall)
}

func (fake *FakeCrawler) CrawlCalls(stub func(url.URL) crawl.Counters) {
	fake.crawlMutex.Lock()
	defer fake.crawlMutex.Unlock()
	fake.CrawlStub = stub
}

func (fake *FakeCrawler) CrawlArgsForCall(i int) url.URL {
	fake.crawlMutex.RLock()
	defer fake.crawlMutex.RUnlock()
	argsForCall := fake.crawlArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCrawler) CrawlReturns(result1 crawl.Counters) {
	fake.crawlMutex.Lock()
	defer fake.crawlMutex.Unlock()
	fake.CrawlStub = nil
	fake.crawlReturns = struct {
		result1 crawl.Counters
	}{result1}
}

func (fake *FakeCrawler) CrawlReturnsOnCall(i int, result1 crawl.Counters) {
	fake.crawlMutex.Lock()
	defer fake.crawlMutex.Unlock()
	fake.CrawlStub = nil
	if fake.crawlReturnsOnCall == nil {
		fake.crawlReturnsOnCall = make(map[int]struct {
			result1 crawl.Counters
		})
	}
	fake.crawlReturnsOnCall[i] = struct {
		result1 crawl.Counters
	}{result1}
}

func (fake *FakeCrawler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.crawlMutex.RLock()
	defer fake.crawlMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCrawler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ crawl.Crawler = new(FakeCrawler)
